# -*- coding: utf-8 -*-
"""
Created on Sat Dec 27 18:19:37 2014

@author: thomasaref
"""
from enaml.core.api import Include, Looper, DynamicTemplate
from enaml.layout.api import vbox, hbox, align, spacer, TabLayout, InsertItem,  InsertTab, HSplitLayout
from enaml.widgets.api import (
    MainWindow,  Container, PushButton, Field, CheckBox, ObjectCombo, Form, DockArea, DockItem, Slider,
    StatusBar, StatusItem, Label, DockPane, MultilineField, Window, ToolBar, Action, ActionGroup, FileDialogEx, GroupBox
)


from e_Base import BaseTemp
from e_Plotter import  PlotItem, show_item as show_plot#, PlotArea
from enaml_Filer import SaveWrap, ReadWrap, ReadSaveWrap
from TA_Fundamentals import cap_case
from atom.api import Atom, Str, Instance, Event

enamldef BossToolBar(ToolBar):
    dock_area='left'
    Action:
        text="Log"
        triggered::
            logpane.show()
        tool_tip = "Show log"
    Action:
        text="Save"
        triggered::
            savepane.show()
        tool_tip = "Show save pane"
    Action:
        text = "PlotPane"
        triggered:: plotpane.show() #print dir(bossarea) #show_plot(bossarea, boss.plot) #show_pane(dyn_pages, 'Plot')
        tool_tip = "Show plot controls"
    Action:
        text = "Plot"
        triggered::
             tbase=[b for b in boss.bases if b.name=="EBL_Item_test"][0]
             tbase.plot(tbase)
                #print bossarea.dock_items()[0].name
                #show_plot(boss.plot.name+'plot', bossarea, target=bossarea.dock_items()[0].name, ItemType=PlotItem, position="right", plotr=boss.plot)
        tool_tip = "Show plot"

    Action:
        separator=True
    Action:
        separator=True

    Action: run:
        text = "Run"
        triggered :: boss.run()
    Action:
        separator=True
    Action:
        separator=True

    Action:
        text = "Bases"
        triggered::
              show_all_bases(bossarea, boss)
        tool_tip = "Show all bases"
    Action:
        separator=True
    Looper: loopy:
        iterable << [b for b in boss.bases if b.name[0]!="_"]
        Action:
            text = loop_item.name
            tool_tip = "Show base: {0}".format(loop_item.name)
            triggered:: 
                show_base(bossarea, loop_item)

def get_plot_items(inlist):
    if inlist==None:
        return []
    return inlist


enamldef PlotBox(GroupBox):
    attr plotr=boss.plot
    alias yinstr
    Container: myc:
        constraints = [vbox(hbox(xinstr_lbl, xinstr, xvar_lbl, xvar), hbox(yinstr_lbl, yinstr, yvar_lbl, yvar), plot_btn)]
        Label: xinstr_lbl:
            text="X instr"
        ObjectCombo: xinstr:
            items = list(boss.plottables.keys())
        Label: yinstr_lbl:
            text="Y instr"
        alias yinstr
        ObjectCombo: yinstr:
            items = list(boss.plottables.keys())
        Label: yvar_lbl:
            text="Y var"
        ObjectCombo: yvar:
            items = boss.plottables[yinstr.selected]

        Label: xvar_lbl:
            text="X var"
        ObjectCombo: xvar:
            items = boss.plottables[xinstr.selected]
        PushButton: plot_btn:
            text="Plot"
            clicked ::
                tbase=[b for b in boss.bases if b.name==yinstr.selected][0]
                tbase.plot()
                show_plot(plotr.name+'plot', bossarea, target=bossarea.dock_items()[0].name, ItemType=PlotItem, position="right", plotr=plotr)

enamldef PlotPane(DockPane):
    dock_area='right'
    title = 'Plot Pane'
    PlotBox:
        pass

enamldef LogPane(DockPane): lp:
    dock_area='bottom'
    title = "Log"
    Container:
        padding = 0
        MultilineField: mlf:
            text << boss.display.log_str

enamldef StreamLogPane(LogPane): lp:
    attr old_stdout=sys.stdout
    attr old_stderr=sys.stderr
    attr logstr=""
    visible::
        boss.display.redirect_stdout(lp.visible)
    activated :: boss.display.redirect_stdout(lp.visible)

enamldef SavePane(DockPane):
    dock_area='top'
    title = "Save"
    SaveWrap:
        filer = boss.save_file
        coder=boss.run
        olp=boss.BASE_DIR+boss.DIVIDER+boss.LOG_NAME

enamldef ReadPane(DockPane):
    dock_area='top'
    title = "Read"
    ReadWrap:
        filer = boss.read_file

enamldef ReadSavePane(DockPane):
    dock_area='top'
    title = "Save and Read"
    ReadSaveWrap:
        read_file = boss.read_file
        save_file = boss.save_file
        runcode = boss.run

enamldef BaseItem(DockItem):
    attr instr
    name = instr.name
    title = cap_case(instr.name)
    DynamicTemplate:  #use of dynamic template allows custom instrument layouts if defined in enaml
        base = BaseTemp
        args = (instr.view,)

class tempclass:
    name="plot1"

def find_targets(dock_items, target_items=[]):
    names=(o.name for o in dock_items)
    targets=(o.name for o in target_items)
    overlap=list(set(targets).intersection(names))
    return overlap



def show_all_bases(area, boss):
    for item in boss.bases:
        show_base(area, item)

def show_item(name, area, target=None, ItemType=DockItem, position='left', OP=InsertItem, **kwargs):
    item=ItemType(area, **kwargs)
    if target==None:
        if OP==InsertItem:
            op = OP(item=name, position=position)
        else:
            op = OP(item=name)
    else:
        if OP==InsertItem:
            op = OP(item=name, target=target, position=position)
        else:
            op = OP(item=name, target=target)
    area.update_layout(op)

def show_general_item(area, item, ItemType=DockItem, position='left', target_items=[tempclass()], **kwargs):
    if item!=None:
        targets = find_targets(dock_items=area.dock_items(), target_items=target_items)
        if targets==[]:
            show_item(item.name, area, ItemType=ItemType, OP=InsertItem, position=position, **kwargs)
        elif item.name not in targets:
            show_item(item.name, area, target=targets[0], ItemType=ItemType, OP=InsertTab, **kwargs)

def show_base(area, base):
    if base!=None:
        show_general_item(area, base, ItemType=BaseDockItem, target_items=base.boss.bases, instr=base)

def show_plot2(area, plot):
    show_general_item(area, plot, ItemType=PlotItem, position='right', target_items=base.boss.plot_list, plotr=plot)


enamldef BaseDockItem(DockItem):
    attr instr
    name = instr.name
    title = cap_case(instr.name)
    DynamicTemplate:
        base=BaseTemp
        args=(instr.view,)

def bshow_plot(bossarea, boss):
        plotr=boss.plot 
        if "EBL_Item_test" in (b.name for b in boss.bases):
            tbase=[b for b in boss.bases if b.name=="EBL_Item_test"][0]
            tbase.plot(tbase)
            show_plot(plotr.name+'plot', bossarea, target=bossarea.dock_items()[0].name, ItemType=PlotItem, position="right", plotr=plotr)
                

enamldef BossMain(MainWindow): main:
    attr boss    
    attr myinstr : None
    attr other: Window
    title=boss.name
    BossToolBar: 
        pass #alias main:
    initial_position=(0,0)
    #alias readpane
    #ReadSavePane: readpane:
    #    visible = True #False
    alias savepane
    SavePane: savepane:
        visible = False
    alias logpane
    LogPane: logpane:
        pass
    alias plotpane
    PlotPane: plotpane:
        visible = False
    #attr counter = 0
    #StatusBar: statbar:
    #    StatusItem:
    #        Label:
    #            text << unicode(boss.busy)
 
    alias bossarea
    Container: mycont:
        
        #PushButton:
        #    clicked ::
        #        if not main.other:
        #            main.other = OtherWindow()
        #        main.other.show()
        alias bossarea
        DockArea: bossarea:
            activated ::
                for item in boss.bases:
                    if (myinstr==item or boss.show_bases) and item.name[0]!="_":
                        show_base(bossarea, item)
                bshow_plot(bossarea, boss)
                

                    
enamldef AtomMain(MainWindow): main:
    attr instr 
    title="Base"
    activated :: main.send_to_front()
    alias bossarea
    Container: mycont:
        alias bossarea
        DockArea: bossarea:
            layout=TabLayout('myitem')
            DockItem:
                name = "myitem"
                title = cap_case("myitem")
                BaseTemp("Auto"):
                    pass
