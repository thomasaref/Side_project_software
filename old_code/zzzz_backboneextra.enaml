# -*- coding: utf-8 -*-
"""
Created on Thu Jul  9 14:55:56 2015

@author: thomasaref
"""

template TypedView(AttrType):
    """ This default specialization displays read-only text for the value."""
    Field:
        attr vname
        read_only = True
        text << unicode(getattr(instr, vname))

template TypedView(AttrType: Int):
    """ This default specialization displays read-only text for the value."""
    UnitSpinBox:
        attr vname
        vlabel = get_tag(instr, vname, "label", vname)
        uvalue := getattr(instr, vname)
        minimum=int(get_tag(instr, vname, 'low', -2147483648))
        maximum=int(get_tag(instr, vname, 'high', 2147483647))
        unit_factor = get_tag(instr, vname, "unit_factor", 1)
        unit=get_tag(instr, vname, "unit")
        show_uvalue=get_tag(instr, vname, "show_uvalue", False)
        no_spacer=get_tag(instr, vname, "no_spacer", False)

template TypedView(AttrType: Float):
    """specialization for Float members"""
    UnitFloatField:
        attr vname
        vlabel = get_tag(instr, vname, "label", vname)
        unit_factor = get_tag(instr, vname, "unit_factor", 1.0)
        uvalue :=  getattr(instr, vname)
        minimum=get_tag(instr, vname, 'low')
        maximum=get_tag(instr, vname, 'high')
        unit=get_tag(instr, vname, "unit")
        show_uvalue=get_tag(instr, vname, "show_uvalue", False)
        no_spacer=get_tag(instr, vname, "no_spacer", False)

template TypedView(AttrType: Str):
    """ A template for Str using a either a MultilineField or a Field"""
    ChoiceField:
        attr vname
        vlabel = get_tag(instr, vname, "label", vname)
        vtext := getattr(instr, vname)
        vcond = get_tag(instr, vname, "spec")=="multiline"
        no_spacer=get_tag(instr, vname, "no_spacer", False)


#template VarView(instrin, name, baseType):
#    """view of a parameter in a base with identifying label and unit"""
#    GroupBox:
#        attr vname : Unicode
#        flat = True
#        padding=0
#        constraints = constraints_gen(instrin, name, lbl, val, unt, contents_width, contents_top, contents_left) #[hbox( lbl, val, unt),#,
#        #               align('top', val, unt), align('top', lbl, val),
#        #                  align('left', gbcontents, 80, val) | 'medium']#, width == contents_width, height==contents_height]
#                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
##                         (lbl.bottom == contents_bottom) | 'medium']
#        Label: lbl:
#            text = get_tag(instrin, name, 'label', name)
#        Container: val:
#            padding = 0
#            DynamicTemplate:
#                base = TypedView
#                args = (instrin, name, baseType)
#        Label: unt:
#            text = get_tag(instrin, name, 'unit', "no unit")
#            visible = get_tag(instrin, name, 'unit') is not None
#BaseView picks between the VarViews

template VarView(instrin, name, baseType):
    """view of a parameter in a base with identifying label and unit"""
    GroupBox:
        flat = True
        padding=0
        constraints = constraints_gen(instrin, name, lbl, val, unt, contents_width, contents_top, contents_left) #[hbox( lbl, val, unt),#,
        #               align('top', val, unt), align('top', lbl, val),
        #                  align('left', gbcontents, 80, val) | 'medium']#, width == contents_width, height==contents_height]
                        #contents_top == lbl.top, contents_left == lbl.left]#, contents_right == set_params.right,
#                         (lbl.bottom == contents_bottom) | 'medium']
        Label: lbl:
            text = get_tag(instrin, name, 'label', name)
        Container: val:
            padding = 0
            DynamicTemplate:
                base = TypedView
                args = (instrin, name, baseType)
        Label: unt:
            text = get_tag(instrin, name, 'unit', "no unit")
            visible = get_tag(instrin, name, 'unit') is not None
            
            
template InstrView(instrType):
    Container:
        padding = 0
        Looper:
            iterable<<get_main_params(instr)
            
            DynamicTemplate:
                base = VarView
                args = (get_type(instr, loop_item),)
                data = dict(vname=loop_item)
 